#!/usr/bin/env bash

## date:   2022-01-21
## author: duruao@gmail.com
## desc:   launch docker image which was added develop kit layer by DockerDK

DOCKER_BINARY=("nvidia-docker")
DOCKER_NAME=("")
DOCKER_HOSTNAME=(" ")
DOCKER_AUTO_REMOVE=("--rm")
DOCKER_INTERACTIVE=("--interactive")
DOCKER_TTY=("--tty")
DOCKER_DETACH=("")
DOCKER_VOLUME=(" ")
DOCKER_WORKDIR=(" ")
DOCKER_PUBLISH=(" ")
DOCKER_ENV=(" ")
DOCKER_LOGIN=(" ")
DOCKER_FLAGS=(" ")
DOCKER_IMAGE=("/bin/bash")
DOCKER_COMMAND=(" ")

DOCKER_CMD=(${DOCKER_BINARY[@]+"${DOCKER_BINARY[@]}"} run
            ${DOCKER_NAME[@]+"${DOCKER_NAME[@]}"}
            ${DOCKER_HOSTNAME[@]+"${DOCKER_HOSTNAME[@]}"}
            ${DOCKER_AUTO_REMOVE[@]+"${DOCKER_AUTO_REMOVE[@]}"}
            ${DOCKER_INTERACTIVE[@]+"${DOCKER_INTERACTIVE[@]}"}
            ${DOCKER_TTY[@]+"${DOCKER_TTY[@]}"}
            ${DOCKER_DETACH[@]+"${DOCKER_DETACH[@]}"}
            ${DOCKER_VOLUME[@]+"${DOCKER_VOLUME[@]}"}
            ${DOCKER_WORKDIR[@]+"${DOCKER_WORKDIR[@]}"}
            ${DOCKER_PUBLISH[@]+"${DOCKER_PUBLISH[@]}"}
            ${DOCKER_ENV[@]+"${DOCKER_ENV[@]}"}
            ${DOCKER_LOGIN[@]+"${DOCKER_LOGIN[@]}"}
            ${DOCKER_FLAGS[@]+"${DOCKER_FLAGS[@]}"}
            ${DOCKER_IMAGE[@]+"${DOCKER_IMAGE[@]}"}
            ${DOCKER_COMMAND[@]+"${DOCKER_COMMAND[@]}"})

function show_usage() {
  cat <<EOF
Usage: $0 [-h|--help] [--name CONTAINER_NAME] [-d|--detach]
        [-v|--volume HOST_DIR:CONTAINER_DIR] [-p|--publish HOST_PORT:CONTAINER_PORT]
        [--docker-flags FLAGS] <DOCKER_DK_IMAGE:TAG> [COMMAND]

-h, --help
    Display this help message.

-n, --name CONTAINER_NAME
    Assign name to the container (default: "$USER.DOCKER_DK_IMAGE.TAG").

-d, --detach
    Run Container in background and print container ID.

-v, --volume HOST_DIR:CONTAINER_DIR
    Bind mount a volume (default: "$PWD:$PWD").

-p, --publish HOST_PORT:CONTAINER_PORT
    Publish a container's port(s) to the host (default: ALL_EXPOSED_PORTS:RANDOM_PORTS).

--docker-run-flags FLAGS
    Append some flags to the command 'nvidia-docker run ...' or 'docker run ...'.

DOCKER_DK_IMAGE:TAG
    Specify an existing image which was added develop kit layer by DockerDK.

COMMAND
    Set the command to be run inside the container (default: "/bin/bash").

EOF
}

if [ -z "$(command -v "${DOCKER_BINARY[@]}")" ]; then
  DOCKER_BINARY=("docker")
fi
DOCKER_NAME+=("--name ${container_name}")
DOCKER_HOSTNAME+=("--hostname $(echo "${container_name}" | tr "[:lower:]" "[:upper:]")")

DOCKER_IMAGE+=("${docker_dk_image}")

container_list_path="${HOME}/.DockerDK/containers"
mkdir -p "$(dirname "${container_list_path}")"

container_name=""
options=""
command="/bin/bash"
docker_dk_image=""

## parse arguments
while (($#)); do
  case "$1" in
  -h | --help)
    show_usage
    exit 0
    ;;

  -n | --name)
    if [ -z "$2" ]; then
      printf "\033[1;32;31m%s\033[m\n" "Error: $1 requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    container_name="$2"
    shift 2
    ;;

  -v | --volume)
    if [ -z "$2" ]; then
      printf "\033[1;32;31m%s\033[m\n" "Error: $1 requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    container_name="$2"
    shift 2
    ;;

  -c | --command)
    if [ -z "$2" ]; then
      printf "\033[1;32;31m%s\033[m\n" "Error: $1 requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    command="$2"
    shift 2
    ;;

  --* | -*)
    printf "\033[1;32;31m%s\033[m\n" "Error: Unknown flag: $1" >&2
    show_usage >&2
    exit 1
    ;;

  *)
    docker_dk_image="$1"
    #shellcheck disable=SC2001
    image_repository="$(echo "${docker_dk_image}" | sed "s/\:.*//")"
    # shellcheck disable=SC2001
    tag="$(echo "${docker_dk_image}" | sed "s/.*\://")"
    # shellcheck disable=SC2143
    if [ -z "$(docker images | grep "${image_repository} .*${tag}")" ]; then
      printf "\033[1;32;31m%s\033[m\n" "Error: No such Docker Image: $2" >&2
      show_usage >&2
      exit 1
    fi
    #shellcheck disable=SC2001
    image="$(echo "${image_repository}" | sed "s/.*\///")"
    if [ -z "${container_name}" ]; then
      container_name="${USER}.${image}-${tag}"
    fi
    shift 1
    ;;
  esac
done




if [ -z "${docker_dk_image}" ]; then
  printf "\033[1;32;31m%s\033[m\n" "Error: Missing DOCKER_DK_IMAGE" >&2
  show_usage >&2
  exit 1
fi

exposed_ports=("$(docker inspect --format="{{.Config.ExposedPorts}}" "${docker_dk_image}" | sed "s/\([0-9].\)\/tcp\:{}/\1/g" | sed "s/map\[\([0-9]* [0-9]*\)\]/\1/g")")
DOCKER_PUBLISH=()
RANDOM="$(echo "${USER}" | md5sum | head -c 32)"

while port in "${exposed_ports[@]}"; do
  DOCKER_PUBLISH+=( --publish $((RANDOM % $((65535 - 1024 + 1)) + 1024)):"${port}" )
done

echo "+ nvidia-docker run --workdir ${PWD} --rm --interactive --tty --name ${container_name} --volume ${PWD}:${PWD}${DOCKER_PUBLISH}${docker_dk_image} ${command}"
