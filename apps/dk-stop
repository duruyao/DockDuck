#!/usr/bin/env bash

## date:   2022-01-21
## author: duruao@gmail.com
## desc:

set -euo pipefail

function errorln() {
  printf "\033[1;32;31m%s\n\033[m" "${1}"
}

function show_usage() {
  cat <<EOF
Usage: dk stop [OPTIONS] CONTAINER

Attach to a running dock-duck container

Options:
      --dry-run                 Print the docker command to be run, but do not execute it
  -h, --help                    Display this help message

See more about DockDucK at https://github.com/duruyao/DockDucK

EOF
}

dk_home="${HOME}"/.DockDuck
dk_containers_file="${dk_home}"/containers.txt
mkdir -p "${dk_home}"

if [ -z "$(command -v docker)" ]; then
  errorln "Error: Command 'docker' not found, try: sudo apt install <deb name>" >&2
  show_usage >&2
  exit 1
fi

name=""
container=""
dry_run=false

DOCKER_BINARY=("docker")
DOCKER_NAME=()

## parse arguments
while (($#)); do
  case "$1" in
  --dry-run)
    dry_run=true
    shift 1
    ;;

  -h | --help)
    show_usage
    exit 0
    ;;

  --* | -*)
    errorln "Error: Unknown flag: $1" >&2
    show_usage >&2
    exit 1
    ;;

  *)
    container="$1"
    # TODO: check if container is valid
    #
    # TODO: select name according to the container
    #
    name=""
    DOCKER_NAME=("${name}")
    shift 1
    ;;
  esac
done

if [ -z "${container}" ]; then
  errorln "Error: Missing CONTAINER" >&2
  show_usage >&2
  exit 1
fi

DOCKER_CMD=(${DOCKER_BINARY[@]+"${DOCKER_BINARY[@]}"} stop
  ${DOCKER_NAME[@]+"${DOCKER_NAME[@]}"})

if ${dry_run}; then
  echo ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"}
else
  ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"}
  sed -i "s/${name}//" "${dk_containers_file}"
fi
