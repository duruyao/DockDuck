#!/usr/bin/env bash

##  Copyright (c) 2022, DURUYAO. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.

## date:   2022-01-21
## author: duruao@gmail.com
## desc:   attach to a running dock-duck container

set -euo pipefail

dk_home="$(dirname "$(dirname "$(realpath "$0")")")"
dk_data_home="${dk_home}/data"
dk_tools_home="${dk_home}/tools"
dk_containers_file="${dk_data_home}/containers.txt"

default_container=""
default_container_info=""
"${dk_tools_home}"/dk-ps 1>/dev/null 2>&1
if [ -n "$(tail -1 "${dk_containers_file}")" ]; then
  default_container="$(head -1 "${dk_containers_file}")"
  default_container_info="(default: \"${default_container}\")"
fi

function error_ln() {
  printf "\033[1;32;31m%s\n\033[m" "$1"
}

function warning_ln() {
  printf "\033[1;33m%s\n\033[m" "$1"
}

function show_usage() {
  cat <<EOF
Usage: dk attach [OPTIONS] IMAGE

Attach to a running dock-duck container ${default_container_info}

Options:
      --dry-run                 Print the docker command to be run, but do not execute it
  -h, --help                    Display this help message

See more about DockDuck at https://github.com/duruyao/DockDuck

EOF
}

dry_run=false

DOCKER_BINARY=("docker")
DOCKER_INTERACTIVE=("--interactive")
DOCKER_TTY=("--tty")
DOCKER_USER=("--user" "${USER}")
DOCKER_CONTAINER=()
DOCKER_COMMAND=("bash")

## parse arguments
while (($#)); do
  case "$1" in
  --dry-run)
    dry_run=true
    shift 1
    ;;

  -h | --help)
    show_usage
    exit 0
    ;;

  --* | -*)
    error_ln "Error: Unknown flag: '$1'" >&2
    show_usage >&2
    exit 1
    ;;

  *)
    # check if container is valid
    if ! docker ps | grep -q "$1"; then
      warning_ln "Warning: No such container: '$1'"
    else
      # select name according to the container
      name="$(docker ps | grep "$1" | sed "s/ .*//g")"
      DOCKER_CONTAINER=("${name}")
    fi
    shift 1
    ;;
  esac
done

if [ 0 == ${#DOCKER_CONTAINER[@]} ]; then
  DOCKER_CONTAINER+=("${default_container}")
fi

if [ 0 == ${#DOCKER_CONTAINER[@]} ]; then
  error_ln "Error: Missing CONTAINER" >&2
  show_usage >&2
  exit 1
fi

DOCKER_CMD=(${DOCKER_BINARY[@]+"${DOCKER_BINARY[@]}"} "exec"
  ${DOCKER_INTERACTIVE[@]+"${DOCKER_INTERACTIVE[@]}"}
  ${DOCKER_TTY[@]+"${DOCKER_TTY[@]}"}
  ${DOCKER_USER[@]+"${DOCKER_USER[@]}"}
  ${DOCKER_CONTAINER[@]+"${DOCKER_CONTAINER[@]}"}
  ${DOCKER_COMMAND[@]+"${DOCKER_COMMAND[@]}"})

if ${dry_run}; then
  echo ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"}
else
  ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"} || exit
fi
