#!/usr/bin/env bash

##  Copyright (c) 2022, DURUYAO. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.

## date:   2022-01-21
## author: duruao@gmail.com
## desc:   launch a new dock-duck container in the background

set -euo pipefail

dk_home="$(dirname "$(dirname "$(realpath "$0")")")"
dk_data_home="${dk_home}/dk-data"
dk_containers_file="${dk_data_home}"/containers.txt

function error_ln() {
  printf "\033[1;32;31m%s\n\033[m" "$1"
}

function warning_ln() {
  printf "\033[1;33m%s\n\033[m" "$1"
}

function info_ln() {
  printf "\033[0;32;32m%s\n\033[m" "$1"
}

function show_usage() {
  cat <<EOF
Usage: dk detach [OPTIONS] IMAGE

Launch a new dock-duck container in the background

Options:
      --dry-run                 Print the docker command to be run, but do not execute it
      --gpus GPU-REQUEST        GPU devices to add to the container ('all' to pass all GPUs)
  -h, --help                    Display this help message
      --name STRING             Assign name to the container (default: '$USER.IMAGE.TAG')
  -p, --publish LIST            Publish a container's port(s) to the host (default: 'ALL_EXPOSED_PORTS:RANDOM_PORTS')
  -v, --volume LIST             Bind mount a volume (default: '$PWD:$PWD')

See more about DockDuck at https://github.com/duruyao/DockDuck

EOF
}

function show_usage_DEPRECATED() {
  cat <<EOF
Usage: dk detach [OPTIONS] IMAGE

Launch a new dock-duck container in the background

Options:
      --dry-run                 Print the docker command to be run, but do not execute it
      --gpus GPU-REQUEST        GPU devices to add to the container ("all" to pass all GPUs)
  -h, --help                    Display this help message
      --name STRING             Assign name to the container (default: "$USER.IMAGE.TAG")
      --other-flags LIST        Append other flags to the command "docker run ..."
  -p, --publish LIST            Publish a container's port(s) to the host (default: ALL_EXPOSED_PORTS:RANDOM_PORTS)
  -v, --volume LIST             Bind mount a volume (default: "$PWD:$PWD")

See more about DockDuck at https://github.com/duruyao/DockDuck

EOF
}

image=""
name=""
dry_run=false

DOCKER_BINARY=("docker")
DOCKER_NAME=()
DOCKER_HOSTNAME=()
DOCKER_GPUS=()
DOCKER_AUTO_REMOVE=("--rm")
DOCKER_INTERACTIVE=("--interactive")
DOCKER_TTY=("--tty")
DOCKER_DETACH=("--detach")
DOCKER_VOLUME=("--volume" "${PWD}:${PWD}")
DOCKER_WORKDIR=("--workdir" "${PWD}")
DOCKER_PUBLISH=()
DOCKER_ENV=()
DOCKER_DEVICES=()
DOCKER_FLAGS=()
DOCKER_IMAGE=()
DOCKER_LOGIN=("bash" "--login" "/duck/with-the-admin")
DOCKER_COMMAND=("/usr/sbin/sshd" "-D")

## parse arguments
while (($#)); do
  case "$1" in
  --dry-run)
    dry_run=true
    shift 1
    ;;

  --gpus)
    if [ -z "$2" ]; then
      error_ln "Error: '$1' requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    # check if nvidia-docker exists
    if [ -z "$(command -v nvidia-docker)" ]; then
      error_ln "Error: 'nvidia-docker' required but not found" >&2
      show_usage >&2
      exit 1
    fi
    DOCKER_GPUS=("--gpus" "$2") # assign to DOCKER_NAME
    shift 2
    ;;

  -h | --help)
    show_usage
    exit 0
    ;;

  --name)
    if [ -z "$2" ]; then
      error_ln "Error: '$1' requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    # TODO: check if container exists
    #
    name="$2"
    DOCKER_NAME=("--name" "${name}") # assign to DOCKER_NAME
    shift 2
    ;;

  --other-flags)
    if [ -z "$2" ]; then
      error_ln "Error: '$1' requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    DOCKER_FLAGS+=("$2") # assign to DOCKER_FLAGS
    warning_ln "Warning: deprecated option: '--other-flags'"
    shift 2
    ;;

  -p | --publish)
    if [ -z "$2" ]; then
      error_ln "Error: '$1' requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    DOCKER_PUBLISH+=("--publish" "$2") # assign to DOCKER_PUBLISH
    shift 2
    ;;

  -v | --volume)
    if [ -z "$2" ]; then
      error_ln "Error: '$1' requires a non empty argument" >&2
      show_usage >&2
      exit 1
    fi
    # TODO: check if directory is valid
    #
    DOCKER_VOLUME+=("--volume" "$2") # assign to DOCKER_VOLUME
    shift 2
    ;;

  --* | -*)
    error_ln "Error: Unknown flag: '$1'" >&2
    show_usage >&2
    exit 1
    ;;

  *)
    repo="${1//\:*/}"
    tag="${1//*\:/}"
    if ! echo "$1" | grep -q ":"; then
      tag="latest"
    fi
    if [ -z "$(docker images -q "${repo}:${tag}")" ]; then
      error_ln "Error: No such docker image: '${repo}:${tag}'" >&2
      show_usage >&2
      exit 1
    fi
    image="${repo}:${tag}"
    DOCKER_IMAGE=("${image}") # assign to DOCKER_IMAGE
    if [ -z "${name}" ]; then
      name="${USER}.${repo//*\//}.${tag}"
      # TODO: check if container exists
      #
      # TODO: rename container to a valid name
      #
      DOCKER_NAME=("--name" "${name}") # assign to DOCKER_NAME
    fi
    shift 1
    ;;
  esac
done

if [ -z "${image}" ]; then
  error_ln "Error: Missing IMAGE" >&2
  show_usage >&2
  exit 1
fi

DOCKER_HOSTNAME=("--hostname" "$(echo "${name}" | tr "[:upper:]" "[:lower:]" | sed "s/${USER}*\.//" | sed "s/\./-/g")")

DOCKER_ENV+=("--env" "BUILD_USER=$(id -u -n)")  # assign to DOCKER_ENV
DOCKER_ENV+=("--env" "BUILD_UID=$(id -u)")      # assign to DOCKER_ENV
DOCKER_ENV+=("--env" "BUILD_GROUP=$(id -g -n)") # assign to DOCKER_ENV
DOCKER_ENV+=("--env" "BUILD_GID=$(id -g)")      # assign to DOCKER_ENV
DOCKER_ENV+=("--env" "BUILD_HOME=/$(id -u -n)") # assign to DOCKER_ENV

# shellcheck disable=SC2207
exposed_ports=($(docker inspect --format="{{.Config.ExposedPorts}}" "${image}" | sed "s/map\[//" | sed "s/\]//" | sed "s/\/tcp\:{}//g"))
seed=$(echo "${USER}+${image}+${name}" | md5sum | head -c 3)
seed=$((16#${seed}))
if [ 0 = ${#DOCKER_PUBLISH[@]} ]; then
  for port in "${exposed_ports[@]}"; do
    DOCKER_PUBLISH+=("--publish" "$((seed + port)):${port}") # assign to DOCKER_VOLUME
  done
fi

DOCKER_CMD=(${DOCKER_BINARY[@]+"${DOCKER_BINARY[@]}"} "run"
  ${DOCKER_NAME[@]+"${DOCKER_NAME[@]}"}
  ${DOCKER_HOSTNAME[@]+"${DOCKER_HOSTNAME[@]}"}
  ${DOCKER_GPUS[@]+"${DOCKER_GPUS[@]}"}
  ${DOCKER_AUTO_REMOVE[@]+"${DOCKER_AUTO_REMOVE[@]}"}
  ${DOCKER_INTERACTIVE[@]+"${DOCKER_INTERACTIVE[@]}"}
  ${DOCKER_TTY[@]+"${DOCKER_TTY[@]}"}
  ${DOCKER_DETACH[@]+"${DOCKER_DETACH[@]}"}
  ${DOCKER_VOLUME[@]+"${DOCKER_VOLUME[@]}"}
  ${DOCKER_WORKDIR[@]+"${DOCKER_WORKDIR[@]}"}
  ${DOCKER_PUBLISH[@]+"${DOCKER_PUBLISH[@]}"}
  ${DOCKER_ENV[@]+"${DOCKER_ENV[@]}"}
  ${DOCKER_DEVICES[@]+"${DOCKER_DEVICES[@]}"}
  ${DOCKER_FLAGS[@]+"${DOCKER_FLAGS[@]}"}
  ${DOCKER_IMAGE[@]+"${DOCKER_IMAGE[@]}"}
  ${DOCKER_LOGIN[@]+"${DOCKER_LOGIN[@]}"}
  ${DOCKER_COMMAND[@]+"${DOCKER_COMMAND[@]}"})

if ${dry_run}; then
  echo ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"}
else
  sed -i "1i ${name}" "${dk_containers_file}"
  ${DOCKER_CMD[@]+"${DOCKER_CMD[@]}"} || sed -i "/${name}/d" "${dk_containers_file}"
fi
