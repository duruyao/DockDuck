#!/usr/bin/env bash

##  Copyright (c) 2022, DURUYAO. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.

## date:   2022-01-28
## author: duruao@gmail.com
## desc:   update dock-duck tools

set -euo pipefail

function errorln() {
  printf "\033[1;32;31m%s\n\033[m" "$1"
}

function infoln() {
  printf "\033[0;32;32m%s\n\033[m" "$1"
}

function show_usage() {
  cat <<EOF
Usage: dk update [OPTIONS]

Update dock-duck tools

Options:
  -h, --help                    Display this help message

See more about DockDuck at https://github.com/duruyao/DockDuck

EOF
}

function get_latest_tag() {
  # usage: get_latest_tag OWNER/REPOSITORY
  curl --silent "https://api.github.com/repos/$1/releases/latest" | grep "\"tag_name\":" | sed -E "s/.*\"([^\"]+)\".*/\1/"
}

## parse arguments
while (($#)); do
  case "$1" in
  -h | --help)
    show_usage
    exit 0
    ;;

  --* | -* | *)
    errorln "Error: Unknown flag: '$1'" >&2
    show_usage >&2
    exit 1
    ;;
  esac
done

if [ -z "$(command -v curl)" ]; then
  errorln "Error: 'curl' required but not found" >&2
  show_usage >&2
  exit 1
fi

latest_tag="$(get_latest_tag duruyao/DockDuck)"
if [ -z "${latest_tag}" ]; then
  errorln "Error: Latest tag required but not found, please check your network" >&2
  show_usage >&2
  exit 1
fi
infoln "Detected latest tag: '${latest_tag}'"

url="https://github.com/duruyao/DockDuck/archive/refs/tags/${latest_tag}.tar.gz"
latest_release=${latest_tag//v/}

if [ -z "$(command -v tar)" ]; then
  errorln "Error: 'tar' required but not found" >&2
  show_usage >&2
  exit 1
fi
if [ -z "$(command -v gzip)" ]; then
  errorln "Error: 'gzip' required but not found" >&2
  show_usage >&2
  exit 1
fi

tmp_dir="/tmp/$(date | md5sum | head -c 10)"
mkdir -p "${tmp_dir}"
pushd "${tmp_dir}" 1>/dev/null
infoln "Downloading package from ${url} ..."
curl -LSso DockDuck-"${latest_release}".tar.gz "${url}"
tar -zxvf DockDuck-"${latest_release}".tar.gz 1>/dev/null
pushd DockDuck-"${latest_release}" 1>/dev/null
if [ "NOTFOUND" == "${DK_HOME-NOTFOUND}" ]; then
  warningln "Warning: \$DK_HOME not found, use default '$USER/.duck'"
  bash install.sh
else
  bash install.sh --prefix "${DK_HOME}"
fi
popd 1>/dev/null
popd 1>/dev/null
